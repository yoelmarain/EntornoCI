name: CI - Pipeline

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

jobs:
  Lint:
    name: Linter de c√≥digo
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0    

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install --no-audit --nooptional
      # env:
      #   CI: true

    - name: Cache node modules
      uses: actions/cache@v4
      with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

    - name: Lint code with ESLint
      run: npm run lint

  
    # - name: Build project
    #   run: npm run build
    # Por ahora a la build la hacemos en el deploy    

  test_and_sonarCloud:
    name: Test de Jest y Sonar Cloud
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setear Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Instalar dependencias
        run: npm install --no-audit --no-optional

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run tests with Jest
        run: npm test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Chequeo del Quality Gate
        run: |
          SONAR_STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=yoelmarain_EntornoCI" | jq -r '.projectStatus.status')
          if [ "$SONAR_STATUS" != "OK" ]; then
            echo "Quality gate failed: $SONAR_STATUS"
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  notify_slack_test_lint_exito:
    name: Notificar el exito de Jest y Linter
    runs-on: ubuntu-22.04
    needs: test_and_sonarCloud
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs. test_and_sonarCloud.result == 'success'
    steps:                                
    - name: Notificar en Slack (√©xito)
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Jest y Linter"
        SLACK_MESSAGE: "‚úÖTest de Jest y Linter finalizados con √©xito en `${{ github.ref_name }}` por ${{ github.actor }}"
        SLACK_COLOR: good

  notify_slack_test_lint_fallido:
    name: Notificar el fallo de Jest y Linter
    runs-on: ubuntu-22.04
    needs: test_and_sonarCloud
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test_and_sonarCloud.result == 'failure'
    steps:
    - name: Notificar en Slack (error)
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Jest y Linter"
        SLACK_MESSAGE: "‚ùåTest de Jest o Linter fall√≥ en `${{ github.ref_name }}` por ${{ github.actor }}"
        SLACK_COLOR: danger

  start_deploy_render:
      name: Iniciar el despliegue en Render
      runs-on: ubuntu-22.04
      needs: [test_and_sonarCloud, Lint] 
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.test_and_sonarCloud.result == 'success'
      steps:
        - name: Desplegar en Render
          run: |
            response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}")
            if [ $response -eq 200 ]; then
              echo "Deployment triggered successfully"
            else
              echo "Deployment failed with HTTP status code $response"
              curl -X POST -H 'Content-type: application/json' --data '{"text":"Ha fallado al iniciar el despliegue en Render!"}' "${{ secrets.SLACK_WEBHOOK_URL }}"
              exit 1
            fi
          env:
            SLACK_WEBHOOK_DEPLOYS: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  deploy_in_process:
    name: Esperar resultado del deploy en Render
    runs-on: ubuntu-22.04
    needs: start_deploy_render
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.start_deploy_render.result == 'success'
    steps:
      - name: Esperar a que Render termine el deploy
        run: |
          deploy_status="pending"
          while [ "$deploy_status" != "live" ]; do
            response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
            echo "Render API response: $response"
            deploy_status=$(echo $response | jq -r '.[0].deploy.status')
            echo "Current deploy status: $deploy_status"
            if [ "$deploy_status" == "failed" ]; then
              echo "Deployment failed."
              exit 1
            fi
            sleep 5
          done
          echo "Deployment completed successfully."
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

  notify_deploy_exito:
    name: Notificar el exito del deploy
    runs-on: ubuntu-22.04
    needs: deploy_in_process
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy_in_process.result == 'success'
    steps:
      - name: Notificar en Slack (deploy exitoso)
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_TITLE: "Deploy Render"
            SLACK_MESSAGE: "üöÄ Deploy exitoso en `${{ github.ref_name }}` por ${{ github.actor }}"
            SLACK_COLOR: good

  notify_deploy_fallido:
    name: Notificar el fallo del deploy
    runs-on: ubuntu-22.04
    needs: deploy_in_process
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy_in_process.result == 'failure'
    steps:
      - name: Notificar en Slack (deploy fallido)
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
            SLACK_TITLE: "Deploy Render"
            SLACK_MESSAGE: "‚ùå Deploy fallido en `${{ github.ref_name }}` por ${{ github.actor }}"
            SLACK_COLOR: danger
  
  test_deploy:
    name: Testear el deploy
    runs-on: ubuntu-22.04
    needs: deploy_in_process
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setear Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Instalar dependencias
        run: npm install --no-audit --no-optional

      - name: Ejecutar Cypress
        run: npm run cypress:run

  notify_slack_cypress_exito:
    name: Notificar el exito de Cypress
    runs-on: ubuntu-22.04
    needs: test_deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    steps:
      - name: Notificar en Slack (√©xito)
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "Cypress Tests"
          SLACK_MESSAGE: "‚úÖTests de Cypress finalizados con √©xito en `${{ github.ref_name }}` por ${{ github.actor }}"
          SLACK_COLOR: good
     
  notify_slack_cypress_fallido:
    name: Notificar el fallo de Cypress
    runs-on: ubuntu-22.04
    needs: test_deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && failure()
    steps:
      - name: Notificar en Slack (error)
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "Cypress Tests"
          SLACK_MESSAGE: "‚ùåTests de Cypress fallaron en `${{ github.ref_name }}` por ${{ github.actor }}"
          SLACK_COLOR: danger
